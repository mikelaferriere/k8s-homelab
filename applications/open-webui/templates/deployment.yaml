---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.app.name }}
  name: {{ .Values.app.name }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: internal-app
        vault.hashicorp.com/agent-inject-template-init: |
          {{`{{- with secret "kv/data/secrets/open-webui" -}}
            export OAUTH_CLIENT_ID={{ .Data.data.OAUTH_CLIENT_ID }}
            export OAUTH_CLIENT_SECRET={{ .Data.data.OAUTH_CLIENT_SECRET }}
          {{- end }}`}}
      labels:
        app: {{ .Values.app.name }}
    spec:  
      tolerations:
        - key: "nvidia.com/gpu"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      # affinty:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: "nvidia.com/gpu"
      #           operator: In
      #           values:
      #             - "true"
      volumes:
      - name: webui-data
        persistentVolumeClaim:
          claimName: open-webui-claim
      containers:
      - image: ghcr.io/open-webui/open-webui
        name: {{ .Values.app.name }}
        command: ["sh", "-c", ". /vault/secrets/init && bash start.sh"]
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        envFrom:
          - configMapRef:
              name: {{ .Values.app.name }}-config
        volumeMounts:
          - name: webui-data
            mountPath: /app/backend/data
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits: 
            cpu: '1'
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 30