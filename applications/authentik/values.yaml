---
authentik:
  global:
    addPrometheusAnnotations: true

    podAnnotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: 'internal-app'
      vault.hashicorp.com/agent-inject-template-secret-key: |
        {{- with secret "kv/data/secrets/authentik" -}}
        {{ .Data.AUTHENTIK_SECRET_KEY }}
        {{- end }}
      vault.hashicorp.com/agent-inject-template-postgresql-password: |
        {{- with secret "kv/data/secrets/authentik" -}}
        {{ .Data.PG_PASSWORD }}
        {{- end }}

  server:
    env:
      - name: AUTHENTIK_SECRET_KEY
        value: file:///vault/secrets/secret-key
      - name: AUTHENTIK_POSTGRESQL__PASSWORD
        value: file:///vault/secrets/postgresql-password
    metrics:
      enabled: true
    service:
      annotations:
        metallb.universe.tf/loadBalancerIPs: 10.10.10.208
      type: LoadBalancer
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: letsencrypt-issuer-prod
      ingressClassName: nginx
      tls:
        - hosts:
            - auth-k8s.laferriere.app
          secretName: authentik-secret
      hosts:
        - auth-k8s.laferriere.app
      extraPaths:
        - path: /outpost.goauthentik.io
          pathType: Prefix
          backend:
            # Or, to use an external Outpost, create an ExternalName service and reference that here.
            # See https://kubernetes.io/docs/concepts/services-networking/service/#externalname
            service:
              name: authentik-server
              port:
                number: 9000

  authentik:
    secret_key: file:///vault/secrets/secret-key
    error_reporting:
      enabled: false
    postgresql:
      password: file:///vault/secrets/postgresql-password

  postgresql:
    metrics:
      enabled: true
    enabled: true
    image:
      tag: 16.2.0

    primary:
      extraVolumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "vault-database"
      extraVolumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secret-store/postgresql-password"
          readOnly: true
      extraEnvVars:
        - name: ALLOW_EMPTY_PASSWORD
          value: "true"
        - name: POSTGRES_PASSWORD_FILE
          value: /mnt/secret-store/postgresql-password

  redis:
    enabled: true

secret-store-csi-driver:
  syncSecret:
    enabled: true
